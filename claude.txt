#include "../ex01/zombie.hpp"

Zombie *ZombieHorde(int N, std::string name)
{
	Zombie* horde = new Zombie[N];
	for (int i = 0; i < N; i++)
		horde[i].setName(name);
	return horde;
}

int main(void)
{
    int n = 5;  // Nombre de zombies dans la horde
    std::string zombie_name = "ZombieHorde";
    
    // Créer une horde de 5 zombies appelés "ZombieHorde"
    Zombie* horde = ZombieHorde(n, zombie_name);
    
    // Faire annoncer chaque zombie
    for (int i = 0; i < n; i++)
    {
        std::cout << "Zombie " << i << " s'annonce: ";
        horde[i].announce();
    }
    
    // Libérer la mémoire - TRÈS IMPORTANT d'utiliser delete[]
    delete[] horde;
    
    return (0);
}NAME = zombie

SRCS = main.cpp zombie.cpp 

OBJS = $(SRCS:.cpp=.o)

CXX = c++
CXXFLAGS = -Wall -Wextra -Werror -std=c++98

all: $(NAME)

$(NAME): $(OBJS)
	$(CXX) $(CXXFLAGS) $(OBJS) -o $(NAME)

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re#include "zombie.hpp"

Zombie::Zombie()
{
    name = "";
   
}

void Zombie::setName(std::string zombie_name)
{
    name = zombie_name;
}
Zombie* newZombie(std::string name)
{
	Zombie* zombie = new Zombie(name);
	return zombie;
}

void randomChump(std::string name)
{
	Zombie zombie(name);
	zombie.announce();
}#ifndef ZOMBIE_HPP
# define ZOMBIE_HPP

#include <iostream>

class Zombie
{
private:
    std::string name;

public:
    Zombie();
    Zombie(std::string zombie_name);
    ~Zombie();
    void announce(void);
    void setName(std::string zombie_name);
};

Zombie *ZombieHorde(int N, std::string name);
#endif